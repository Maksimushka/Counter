{"version":3,"sources":["components/settingCounter/SettingCounter.module.css","components/button/Button.module.css","components/counter/Counter.module.css","components/button/Button.tsx","components/settingCounter/settingDisplay/SettingDisplay.tsx","redux/action.ts","components/settingCounter/SettingCounter.tsx","components/counter/display/Display.tsx","components/counter/Counter.tsx","App.tsx","reportWebVitals.ts","redux/countReducer.ts","redux/store.ts","utils/localStorage.ts","index.tsx","components/settingCounter/settingDisplay/SettingDisplay.module.css","components/counter/display/Display.module.css"],"names":["module","exports","Button","props","className","s","buttons","disabled","disable","onClick","onChangeCount","button","children","SettingDisplay","setSetting","changeMaxValue","changeStartValue","error","maxValue","startValue","onSetSetting","display","max","type","onFocus","value","onChange","e","newMaxValue","currentTarget","valueAsNumber","start","newStartValue","JSON","parse","setStartValueAC","setMaxValueAC","setIsCountAC","SettingCounter","useSelector","state","isCount","dispatch","useDispatch","disableSet","useCallback","setCount","SetCounter","Display","counterTop","countValue","displayClass","displayError","countClass","SPAN","full","Counter","counterValue","increaseCount","resetCount","disableInc","disableReset","counter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","counterReducer","action","store","createStore","serializedState","localStorage","getItem","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.682e83b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SetCounter\":\"SettingCounter_SetCounter__11IY0\",\"buttons\":\"SettingCounter_buttons__3ikPq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2YtLE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__2VF4c\",\"buttons\":\"Counter_buttons__20GDR\"};","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\ntype ButtonPropsType = {\r\n    onChangeCount: () => void\r\n    children: string\r\n    disable: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    const onChangeCount = () => {\r\n        props.onChangeCount()\r\n    }\r\n\r\n    return (\r\n        <div className={ s.buttons }>\r\n            <button\r\n                disabled={ props.disable }\r\n                onClick={ onChangeCount }\r\n                className={ s.button }>{props.children}</button>\r\n        </div>\r\n    );\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './SettingDisplay.module.css';\r\n\r\ntype SettingDisplayPropsType = {\r\n    setSetting: () => void\r\n    changeMaxValue: (value: number) => void\r\n    changeStartValue: (value: number) => void\r\n    maxValue: number\r\n    startValue: number\r\n    error: string\r\n}\r\n\r\nexport function SettingDisplay(\r\n    {setSetting, changeMaxValue, changeStartValue, error, maxValue, startValue }: SettingDisplayPropsType)\r\n{\r\n\r\n    function onChangeMaxHandler(e: ChangeEvent<HTMLInputElement>) {\r\n        let newMaxValue = e.currentTarget.valueAsNumber\r\n        changeMaxValue(newMaxValue)\r\n    }\r\n\r\n    function onChangeStartHandler(e: ChangeEvent<HTMLInputElement>) {\r\n        let newStartValue = JSON.parse(e.currentTarget.value)\r\n        changeStartValue(newStartValue)\r\n    }\r\n\r\n    function onSetSetting() {\r\n        setSetting()\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={ s.display }>\r\n            <div className={ s.max }>\r\n                <span>max value:</span>\r\n                <input\r\n                    className={ error && s.error}\r\n                    type=\"number\"\r\n                    onFocus={ onSetSetting }\r\n                    value={ maxValue }\r\n                    onChange={ onChangeMaxHandler }\r\n                />\r\n            </div>\r\n            <div className={ s.start }>\r\n                <span>start value:</span>\r\n                <input\r\n                    className={ error && s.error}\r\n                    onFocus={  onSetSetting }\r\n                    value={ startValue }\r\n                    type=\"number\"\r\n                    onChange={ onChangeStartHandler }\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n","// TYPES\r\nexport type setStartValueACType = {\r\n    type: 'SET_START_VALUE'\r\n    value: number\r\n}\r\nexport type setMaxValueACType = {\r\n    type: 'SET_MAX_VALUE'\r\n    value: number\r\n}\r\nexport type increaseCountValueACType = {\r\n    type: 'INCREASE_COUNT_VALUE'\r\n}\r\nexport type resetCountValueACType = {\r\n    type: 'RESET_COUNT_VALUE'\r\n}\r\nexport type setErrorACType = {\r\n    type: 'SET_ERROR'\r\n}\r\nexport type deleteErrorACType = {\r\n    type: 'DELETE_ERROR'\r\n}\r\nexport type setIsCountACType = {\r\n    type: 'SET_IS_COUNT'\r\n    value: boolean\r\n}\r\nexport type setValueFromLocalStorageACType = {\r\n    type: 'SET_VALUE_FROM_LOCAL_STORAGE'\r\n    value: number\r\n}\r\n\r\n// ACTIONS\r\nexport const setStartValueAC = (value: number): setStartValueACType => ({ type: 'SET_START_VALUE', value })\r\nexport const setMaxValueAC = (value: number): setMaxValueACType => ({ type: 'SET_MAX_VALUE', value })\r\nexport const resetCountValueAC = (): resetCountValueACType => ({ type: 'RESET_COUNT_VALUE' })\r\nexport const increaseCountValueAC = (): increaseCountValueACType => ({ type: 'INCREASE_COUNT_VALUE' })\r\nexport const setErrorAC = (): setErrorACType => ({ type: 'SET_ERROR' })\r\nexport const deleteErrorAC = (): deleteErrorACType => ({ type: 'DELETE_ERROR' })\r\nexport const setIsCountAC = (value: boolean): setIsCountACType => ({ type: 'SET_IS_COUNT', value })\r\n\r\n\r\n","import React, {useCallback, useState} from 'react';\r\nimport s from './SettingCounter.module.css';\r\nimport {Button} from \"../button/Button\";\r\nimport {SettingDisplay} from \"./settingDisplay/SettingDisplay\";\r\nimport {deleteErrorAC, setErrorAC, setIsCountAC, setMaxValueAC, setStartValueAC} from '../../redux/action';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {actionTypes} from '../../redux/countReducer';\r\nimport {RootStateReduxType} from '../../redux/store';\r\nimport {SelectorType} from '../../App';\r\n\r\nexport const SettingCounter = () => {\r\n    const {\r\n        startValue, maxValue, isCount, error\r\n    } = useSelector<RootStateReduxType, SelectorType>((state) => state)\r\n    const dispatch = useDispatch<Dispatch<actionTypes>>()\r\n\r\n    let disableSet = isCount || !!error\r\n\r\n    const setSetting = useCallback(() => dispatch(setIsCountAC(false)), [dispatch])\r\n    const setCount = useCallback(() => dispatch(setIsCountAC(true)), [dispatch])\r\n    const changeMaxValue = useCallback((value: number) => {\r\n        if (value < 0 || value <= startValue) {\r\n            dispatch(setErrorAC())\r\n            dispatch(setMaxValueAC(value))\r\n        } else {\r\n            dispatch(setMaxValueAC(value))\r\n            dispatch(deleteErrorAC())\r\n        }\r\n    }, [dispatch, startValue])\r\n    const changeStartValue = useCallback((value: number) => {\r\n        if (value < 0 || value >= maxValue) {\r\n            dispatch(setErrorAC())\r\n            dispatch(setStartValueAC(value))\r\n        } else {\r\n            dispatch(setStartValueAC(value))\r\n            dispatch(deleteErrorAC())\r\n        }\r\n    }, [dispatch, maxValue])\r\n\r\n    return (\r\n        <div className={ s.SetCounter }>\r\n            <SettingDisplay\r\n                setSetting={ setSetting }\r\n                changeMaxValue={ changeMaxValue }\r\n                changeStartValue={ changeStartValue }\r\n                maxValue={ maxValue }\r\n                startValue={ startValue }\r\n                error={ error }\r\n            />\r\n            <div className={s.buttons}>\r\n                <Button onChangeCount={ setCount }\r\n                        disable={ disableSet } >set</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from './Display.module.css';\r\n\r\ntype DisplayPropsType = {\r\n    countValue: number | string\r\n    error: string\r\n    counterTop: boolean\r\n}\r\n\r\nexport function Display({counterTop, error, countValue}: DisplayPropsType) {\r\n\r\n    let displayClass = `${s.display} ${error ? s.displayError : \"\"}`\r\n    let countClass = `${s.SPAN} ${counterTop ? s.full : \"\"}`\r\n\r\n    return (\r\n        <div className={displayClass}>\r\n            {\r\n                error\r\n                    ? <span className={s.SPAN}>{error}</span>\r\n                    : <span className={countClass}>{countValue}</span>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {useCallback} from 'react';\r\nimport s from './Counter.module.css';\r\nimport {Display} from \"./display/Display\";\r\nimport {Button} from \"../button/Button\";\r\nimport {increaseCountValueAC, resetCountValueAC} from '../../redux/action';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {actionTypes} from '../../redux/countReducer';\r\nimport {RootStateReduxType} from '../../redux/store';\r\nimport {SelectorType} from '../../App';\r\n\r\nexport const Counter: React.FC = () => {\r\n    const {\r\n        isCount, error,\r\n        maxValue, counterValue,\r\n        startValue\r\n    } = useSelector<RootStateReduxType, SelectorType>((state) => state)\r\n    const dispatch = useDispatch<Dispatch<actionTypes>>()\r\n\r\n    const increaseCount = useCallback(() => dispatch(increaseCountValueAC()), [dispatch])\r\n    const resetCount = useCallback(() => dispatch(resetCountValueAC()), [dispatch])\r\n\r\n    let disableInc = !isCount || counterValue === maxValue\r\n    let disableReset = !isCount || counterValue === startValue\r\n    let counterTop = counterValue === maxValue\r\n\r\n    return (\r\n        <div className={ s.counter }>\r\n            <Display\r\n                counterTop={counterTop}\r\n                error={error}\r\n                countValue={isCount ? counterValue: 'PRESS BUTTON SET'}\r\n            />\r\n            <div className={s.buttons}>\r\n                <Button onChangeCount={ increaseCount }\r\n                        disable={ disableInc }>inc</Button>\r\n                <Button onChangeCount={ resetCount }\r\n                        disable={ disableReset }>reset</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport {SettingCounter} from './components/settingCounter/SettingCounter';\nimport {Counter} from './components/counter/Counter';\n\nexport type SelectorType = {\n    startValue: number\n    maxValue: number\n    error: string\n    isCount: boolean\n    counterValue: number\n}\n\nfunction App() {\n \n\n    return (\n        <div className=\"App\">\n            <SettingCounter />\n            <Counter />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    deleteErrorACType,\r\n    increaseCountValueACType,\r\n    resetCountValueACType,\r\n    setErrorACType,\r\n    setIsCountACType,\r\n    setMaxValueACType,\r\n    setStartValueACType, setValueFromLocalStorageACType\r\n} from './action';\r\n\r\nexport type actionTypes = setStartValueACType | setMaxValueACType\r\n    | setErrorACType | setIsCountACType | resetCountValueACType\r\n    | increaseCountValueACType | deleteErrorACType | setValueFromLocalStorageACType\r\n\r\nconst initialState = {\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    counterValue: 0,\r\n    error: '',\r\n    isCount: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nconst counterReducer = (state: InitialStateType = initialState, action: actionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_START_VALUE': {\r\n            return {\r\n                ...state,\r\n                startValue: action.value,\r\n                counterValue: action.value\r\n            }\r\n        }\r\n        case 'SET_MAX_VALUE': {\r\n            return { ...state, maxValue: action.value }\r\n        }\r\n        case 'INCREASE_COUNT_VALUE': {\r\n            return { ...state, counterValue: state.counterValue += 1 }\r\n        }\r\n        case 'RESET_COUNT_VALUE': {\r\n            return { ...state,  counterValue: state.startValue }\r\n        }\r\n        case 'SET_IS_COUNT': {\r\n            return { ...state, isCount: action.value }\r\n        }\r\n        case 'SET_ERROR': {\r\n            return { ...state, error: \"Incorrect value\" }\r\n        }\r\n        case 'DELETE_ERROR': {\r\n            return  { ...state,  error: '' }\r\n        }\r\n        case 'SET_VALUE_FROM_LOCAL_STORAGE': {\r\n            return { ...state }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default counterReducer\r\n\r\n\r\n","import {createStore} from 'redux';\r\nimport counterReducer from './countReducer';\r\nimport {loadState, saveState} from '../utils/localStorage';\r\n\r\nconst store = createStore(counterReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        startValue: store.getState().startValue,\r\n        maxValue: store.getState().maxValue,\r\n        counterValue: store.getState().startValue,\r\n        error: store.getState().error\r\n    });\r\n});\r\n\r\nexport default store\r\n\r\nexport type RootStateReduxType = ReturnType<typeof counterReducer>","export const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: {counterValue: number, maxValue: number, startValue: number, error: string}) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"SettingDisplay_display__1YMhz\",\"max\":\"SettingDisplay_max__2K7r-\",\"start\":\"SettingDisplay_start__2uDoW\",\"error\":\"SettingDisplay_error__3PKTL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__36qOp\",\"SPAN\":\"Display_SPAN__1BokX\",\"full\":\"Display_full__1m0OO\",\"displayError\":\"Display_displayError__3DO-g\"};"],"sourceRoot":""}